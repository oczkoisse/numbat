import sys
import sysconfig

import enscons
import pytoml as toml

metadata = dict(toml.load(open("pyproject.toml")))["tool"]["enscons"]

full_tag = "py3-none-any"

env = Environment(
    tools=["default", "packaging", enscons.generate],
    PACKAGE_METADATA=metadata,
    WHEEL_TAG=full_tag,
)

# Mapping of Qt tool name to its location on file system
qt_tools = {"pyside6-uic": None, "pyside6-rcc": None}

# Indicates whether Qt tools have been located
found = False

if not found:
    # Try to find Qt tools on external environment's PATH (os.environ['PATH'])
    for name in qt_tools:
        qt_tools[name] = WhereIs(name)
    if all(qt_tools.values()):
        found = True

if not found:
    # PATH is probably not set properly
    # Cross-platform way to get executables' directory
    scripts_dir = sysconfig.get_paths()["scripts"]
    env.PrependENVPath("PATH", scripts_dir)
    # Try to find Qt tools in executables' directory
    for name in qt_tools:
        qt_tools[name] = env.WhereIs(name)
    if all(qt_tools.values()):
        found = True

if not found:
    print("Unable to locate Qt tools. Exiting.")
    Exit(1)

# TODO: Find out why pip isolated builds don't work without setting PYTHONPATH
env.PrependENVPath("PYTHONPATH", sys.path)

# Builder for converting .ui files to _ui.py files
# single_source without targets means builder is called once per source
uic_builder = Builder(
    # --from-imports ensures that .py files generated from .qrc files are
    # imported using relative imports in the .py generated from .ui file when
    # such .qrc has been linked in the .ui file (using Qt Designer's Resource
    # Browser). Without this, an absolute import is generated which disregards
    # any package structure one might have.
    action=f"{qt_tools['pyside6-uic']} --from-imports -o $TARGET $SOURCE",
    suffix="_ui.py",  # Suffix for autogenerated .py files from .ui files
    src_suffix=".ui",
    single_source=True,
)


def _add_resource_deps(source, target, env):
    """Add resources in .qrc file as explicit dependencies for _rc.py file.

    This is meant to be used as an emitter function. While an emitter usually
    modifies source and/or target lists, in this case, it merely adds explicit
    dependency between each file in the .qrc file and the to be generated
    _rc.py file. This is necessary so that the resources are correctly inferred
    as source files by FindSourceFiles() function. The input sources and
    targets are returned unmodified.

    Args:
        source: List of source nodes.
        target: List of target nodes.
        env: Construction environment to use for context.

    Returns:
        A tuple containing two lists, a list of targets and a list of sources.
    """
    import xml.etree.ElementTree as ET
    from pathlib import Path

    for source_cur in source:
        source_cur_dir = Path(source_cur.path).parent
        tree = ET.fromstring(source_cur.get_text_contents())
        for e in tree.findall(".//file"):
            env.Depends(target, str(source_cur_dir / Path(e.text)))
    return target, source


# Builder for converting .qrc files to _rc.py files
# single_source without targets means builder is called once per source
rcc_builder = Builder(
    action=f"{qt_tools['pyside6-rcc']} -o $TARGET $SOURCE",
    suffix="_rc.py",  # Suffix for autogenerated .py files from .qrc files
    src_suffix=".qrc",
    emitter=_add_resource_deps,
    single_source=True,
)

env.Append(
    BUILDERS={
        "Uic": uic_builder,
        "Rcc": rcc_builder,
    }
)

# Qt .ui files
ui_source = env.Glob("src/numbat/*.ui")
ui_py_source = env.Uic(source=ui_source)
ui = env.Alias("ui", ui_py_source)

# Qt .qrc files
qrc_source = env.Glob("src/numbat/*.qrc")
qrc_py_source = env.Rcc(source=qrc_source)
qrc = env.Alias("qrc", qrc_py_source)

# Catch-all for Qt stuff that should be compiled
env.Alias("qt", [qrc, ui])

# All .py files (auto-generated or not) should go into the .whl
py_source = env.Glob("src/numbat/*.py")
purelib = env.Whl("purelib", py_source, root="src")
whl = env.WhlFile(purelib)

# Only source files should go into sdist
sdist = env.SDist(source=FindSourceFiles() + ["PKG-INFO", "setup.py"])
env.NoClean(sdist)
env.Alias("sdist", sdist)

develop = env.Command("#DEVELOP", enscons.egg_info_targets(env), enscons.develop)
env.Alias("develop", develop)

# needed for pep517 / enscons.api to work
env.Default(whl, sdist)
