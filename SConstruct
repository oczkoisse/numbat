from pathlib import Path

import enscons
import pytoml as toml

metadata = dict(toml.load(open("pyproject.toml")))["tool"]["enscons"]

full_tag = "py3-none-any"

env = Environment(
    tools=["default", "packaging", enscons.generate],
    PACKAGE_METADATA=metadata,
    WHEEL_TAG=full_tag,
)

# Get Qt tools
qt_tools = ["pyside6-uic", "pyside6-rcc"]
# Look for the tool on PATH
# Note that this is necessary because SCons doesn't use system PATH by default
qt_tools_paths = list(map(WhereIs, qt_tools))

if all(qt_tools_paths):
    tool_path = qt_tools_paths[0]
    # Get tool directory <tool_dir> on PATH
    tool_dir = Path(tool_path).parent
    env.PrependENVPath("PATH", tool_dir)
    # Get <tool_dir>/../lib/site-packages on PYTHONPATH because tools need to
    # import the corresponding Python packages. This is a bit of a hack, but it
    # is probably the only way because VirtualEnv() in SCons seems to return
    # virtual environment path relative to SConstruct file instead of the
    # actual virtual environment the script is running in, which is problematic
    # for isolated builds
    env.PrependENVPath("PYTHONPATH", tool_dir.parent / "lib" / "site-packages")
else:
    print(f"Unable to locate Qt tools. Exiting.")
    Exit(1)

# Since we put the executable on PATH, we can call Qt tools directly
# Builder for converting .ui files to .py files
# single_source without targets means it's called once per source
uic_builder = Builder(
    action="pyside6-uic $SOURCE -o $TARGET",
    suffix="_ui.py",  # Suffix for autogenerated .py files from .ui files
    src_suffix=".ui",
    single_source=True,  # Call once for each source file
)

# Builder for converting .qrc files to .py files
# single_source without targets means it's called once per source
rcc_builder = Builder(
    # Example: pyside6-rcc icons.qrc -o rc_icons.py
    action="pyside6-rcc $SOURCE -o $TARGET",
    suffix="_rc.py",  # Suffix for autogenerated .py files from .qrc files
    src_suffix=".qrc",
    single_source=True,  # Call once for each source file
)

env.Append(
    BUILDERS={
        "Uic": uic_builder,
        "Rcc": rcc_builder,
    }
)

# Qt .ui files
ui_source = env.Glob("src/numbat/*.ui")
ui_py_source = env.Uic(source=ui_source)
ui = env.Alias("ui", ui_py_source)

# Qt .qrc files
qrc_source = env.Glob("src/numbat/*.qrc")
qrc_py_source = env.Rcc(source=qrc_source)
qrc = env.Alias("qrc", qrc_py_source)

# Catch-all for Qt stuff that should be compiled
env.Alias("qt", [qrc, ui])

# All .py files (auto-generated or not) should go into the .whl
py_source = env.Glob("src/numbat/*.py")
purelib = env.Whl("purelib", py_source, root="src")
whl = env.WhlFile(purelib)

# Only source files should go into sdist
sdist = env.SDist(source=FindSourceFiles() + ["PKG-INFO", "setup.py"])
env.NoClean(sdist)
env.Alias("sdist", sdist)

develop = env.Command("#DEVELOP", enscons.egg_info_targets(env), enscons.develop)
env.Alias("develop", develop)

# needed for pep517 / enscons.api to work
env.Default(whl, sdist)
